AWSTemplateFormatVersion: 2010-09-09
Description: Create instances.

Parameters:
  Domain:
      Type: String
  RulePriority:
    Type: Number
  Cpu:
    Type: Number
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Default: 256
  Memory:
    Type: Number
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Default: 512
  MemoryReservation:
    Type: Number
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Default: 256
  MinContainerCount:
    # 最低コンテナ数を設定する
    # ECSServiceのDesiredCountと、AutoScalingTargetのMinCapacityに使う
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 1
  MaxContainerCount:
    # 最大コンテナ数を設定する
    Type: Number
    MinValue: 2
    MaxValue: 100
    Default: 4

Resources:
  # SSL証明書を作成
  Cert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Domain
      ValidationMethod: DNS

  # ロードバランサーのリスナーに対象サイトのSSL証明書を登録
  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref Cert
      ListenerArn: !ImportValue Vpc1-LoadBalancerListener

  # サービス別にターゲットグループを作成
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue Vpc1
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 3

  # サービス別にバランサのリスナーに対して、ルールを追加
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Ref Domain
      ListenerArn: !ImportValue Vpc1-LoadBalancerListener
      Priority: !Ref RulePriority

  # ECSのタスクを定義(マシン性能、対象ECRリポジトリ)
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task-def"
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      ExecutionRoleArn: !ImportValue ECSTaskExecutionRole
      TaskRoleArn: !ImportValue AppServerRole
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-container"
          # リポジトリURLはECRのCfnで作成したものを、StackNameを元に見つけて使う
          Image: {"Fn::ImportValue": !Sub "${AWS::StackName}-ecr-url"}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue Vpc1-ECS-LogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: ecs
          MemoryReservation: !Ref MemoryReservation
          PortMappings:
            - Protocol: tcp
              HostPort: 80
              ContainerPort: 80

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue Vpc1-ECS-Cluster
      DesiredCount: !Ref MinContainerCount
      LaunchType: FARGATE
      ServiceName: !Sub "${AWS::StackName}-service"
      TaskDefinition: !Ref ECSTaskDefinition
      DeploymentConfiguration:
        # タスク定義更新の際には、コンテナ数を2倍にしてデプロイを進める
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Sub "${AWS::StackName}-container"
          ContainerPort: 80
      NetworkConfiguration:
        AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !ImportValue Vpc1-ContainerSecurityGroup
            Subnets:
              - !ImportValue Vpc1-SubnetA1
              - !ImportValue Vpc1-SubnetC1
    DependsOn:
      - ListenerCertificate
      - TargetGroup
      - ListenerRule
      - ECSTaskDefinition

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainerCount
      MaxCapacity: !Ref MaxContainerCount
      ResourceId: !Join ['/', [service, !GetAtt ECSService.Name, !Sub "${AWS::StackName}-service"]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !ImportValue AutoScalingRoleArn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ECSService.Name, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 120
        ScaleOutCooldown: 120
        TargetValue: 50
